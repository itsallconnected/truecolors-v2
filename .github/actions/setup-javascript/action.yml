name: 'Setup Javascript'
description: 'Setup a Javascript environment ready to run the Truecolors code'
inputs:
  onlyProduction:
    description: Only install production dependencies
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'

    # Make sure Corepack is properly enabled before any yarn commands
    - name: Enable and prepare Corepack
      shell: bash
      run: |
        # Enable Corepack and ensure we use the correct Yarn version
        echo "Enabling Corepack for Yarn version management..."

        # Always install Corepack for consistency
        echo "Installing Corepack..."
        npm install -g corepack

        # Enable Corepack
        echo "Enabling Corepack..."
        corepack enable

        # Extract requested Yarn version from package.json or use hardcoded value
        if grep -q '"packageManager"' package.json; then
          YARN_VERSION=$(grep -o '"packageManager": "yarn@[^"]*"' package.json | grep -o '[0-9][0-9.]*')
          echo "Project requires Yarn version: $YARN_VERSION from package.json"
        else
          # Fallback to a known working version
          YARN_VERSION="4.7.0"
          echo "Using default Yarn version: $YARN_VERSION"
        fi
          
        # Force preparing specific version
        echo "Preparing Yarn version $YARN_VERSION..."
        corepack prepare yarn@$YARN_VERSION --activate
        echo "YARN_ENABLE_IMMUTABLE_INSTALLS=false" >> $GITHUB_ENV

        # Create custom Yarn wrapper to ensure we always use the right version
        mkdir -p ~/.local/bin
        echo '#!/bin/bash' > ~/.local/bin/yarn
        echo 'exec "$(which node)" "$(which corepack)" yarn "$@"' >> ~/.local/bin/yarn
        chmod +x ~/.local/bin/yarn
        export PATH="$HOME/.local/bin:$PATH"
        echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

        # Print diagnostic information
        echo "Using Yarn from: $(which yarn)"
        echo "Yarn version: $(yarn --version)"

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      shell: bash
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install all yarn packages
      shell: bash
      run: |
        echo "Installing all dependencies..."
        yarn install
      if: inputs.onlyProduction == 'false'

    - name: Install all production yarn packages
      shell: bash
      run: |
        echo "Installing production dependencies only..."
        yarn workspaces focus --production
      if: inputs.onlyProduction != 'false'
