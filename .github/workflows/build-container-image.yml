name: Build Container Image

on:
  workflow_call:
    inputs:
      cache:
        type: boolean
        default: true
        description: 'Whether to use GitHub Actions cache for Docker layers'
      push_to_images:
        type: string
        description: 'Comma-separated list of image names to push to'
      version_prerelease:
        type: string
        description: 'Prerelease version string'
      version_metadata:
        type: string
        description: 'Version metadata string'
      flavor:
        type: string
        description: 'Docker metadata flavor'
      tags:
        type: string
        description: 'Docker tags to apply'
      labels:
        type: string
        description: 'Docker labels to apply'
      file_to_build:
        type: string
        description: 'Dockerfile path to use for building'
      build_args:
        type: string
        description: 'Additional Docker build arguments'

# This builds multiple images with one runner each, allowing us to build for multiple architectures
# using Github's runners.
# The two-step process is adapted from:
# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
jobs:
  # Build each (amd64 and arm64) image separately
  build-image:
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - uses: actions/checkout@v4

      - name: Prepare
        env:
          PUSH_TO_IMAGES: ${{ inputs.push_to_images }}
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          # Transform multi-line variable into comma-separated variable
          image_names=${PUSH_TO_IMAGES//$'\n'/,}
          echo "IMAGE_NAMES=${image_names%,}" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Log in to Docker Hub
        if: contains(inputs.push_to_images, 'tootsuite')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the GitHub Container registry
        if: contains(inputs.push_to_images, 'ghcr.io')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        if: ${{ inputs.push_to_images != '' }}
        with:
          images: ${{ inputs.push_to_images }}
          flavor: ${{ inputs.flavor }}
          labels: ${{ inputs.labels }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.file_to_build }}
          build-args: |
            TRUECOLORS_VERSION=${{ inputs.version_prerelease }}
            RELEASE_BUILD=${{ inputs.version_metadata == 'RELEASE_BUILD=true' && 'true' || 'false' }}
            SOURCE_COMMIT=${{ github.sha }}
            ${{ inputs.build_args }}
          platforms: ${{ matrix.platform }}
          provenance: false
          push: ${{ inputs.push_to_images != '' }}
          cache-from: ${{ inputs.cache && 'type=gha' || '' }}
          cache-to: ${{ inputs.cache && 'type=gha,mode=max' || '' }}
          tags: ${{ inputs.push_to_images }}
          outputs: type=image,push-by-digest=true

      - name: Export digest
        if: ${{ inputs.push_to_images != '' }}
        run: |
          DIGEST=${{ steps.build.outputs.digest }}
          mkdir -p "${{ runner.temp }}/digests"
          DIGEST_SHA=${DIGEST#sha256:}
          touch "${{ runner.temp }}/digests/$DIGEST_SHA"

      - name: Upload digest
        if: ${{ inputs.push_to_images != '' }}
        uses: actions/upload-artifact@v4
        with:
          # `hashFiles` is used to disambiguate between streaming and non-streaming images
          name: digests-${{ hashFiles(inputs.file_to_build) }}-$PLATFORM_PAIR
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # Then merge the docker images into a single one
  merge-images:
    if: ${{ inputs.push_to_images != '' }}
    runs-on: ubuntu-24.04
    needs:
      - build-image

    env:
      PUSH_TO_IMAGES: ${{ inputs.push_to_images }}

    steps:
      - uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          # `hashFiles` is used to disambiguate between streaming and non-streaming images
          pattern: digests-${{ hashFiles(inputs.file_to_build) }}-*
          merge-multiple: true

      - name: Log in to Docker Hub
        if: contains(inputs.push_to_images, 'tootsuite')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the GitHub Container registry
        if: contains(inputs.push_to_images, 'ghcr.io')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        if: ${{ inputs.push_to_images != '' }}
        with:
          images: ${{ inputs.push_to_images }}
          flavor: ${{ inputs.flavor }}
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # Process each image name separately
          echo "$PUSH_TO_IMAGES" | tr ',' '\n' | while read -r image; do
            # Skip if empty
            [ -z "$image" ] && continue
            
            # Create a manifest list with all digests
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(find . -type f -exec echo "${image}@sha256:$(basename {})" \;)
          done

      - name: Inspect image
        run: |
          echo "$PUSH_TO_IMAGES" | xargs -i{} \
            docker buildx imagetools inspect {}:${{ steps.meta.outputs.version }}





