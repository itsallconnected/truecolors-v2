name: JavaScript Linting
on:
  merge_group:
  push:
    branches:
      - 'main'
      - 'stable-*'
    paths:
      - 'package.json'
      - 'yarn.lock'
      - 'tsconfig.json'
      - '.nvmrc'
      - '.prettier*'
      - '.eslint*'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - '.github/workflows/lint-js.yml'

  pull_request:
    paths:
      - 'package.json'
      - 'yarn.lock'
      - 'tsconfig.json'
      - '.nvmrc'
      - '.prettier*'
      - '.eslint*'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - '.github/workflows/lint-js.yml'

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      YARN_ENABLE_IMMUTABLE_INSTALLS: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack for Yarn version management
        run: |
          # Enable Corepack - available in Node.js 16.9.0+ by default
          if ! command -v corepack &> /dev/null; then
            echo "Installing Corepack manually..."
            npm install -g corepack
          fi

          corepack enable

          # Extract Yarn version from package.json - more robust pattern
          if grep -q '"packageManager"' package.json; then
            YARN_VERSION=$(grep -o '"packageManager": "yarn@[^"]*"' package.json | sed -E 's/.*yarn@([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            echo "Project requires Yarn version: $YARN_VERSION"
            corepack prepare yarn@$YARN_VERSION --activate
          fi

      - name: Set up Javascript environment
        uses: ./.github/actions/setup-javascript

      - name: Verify Yarn setup
        run: |
          # Print diagnostic information
          echo "Using Node.js version: $(node -v)"
          echo "Using Yarn from: $(which yarn)"
          echo "Yarn version: $(yarn --version)"

          # If yarn still isn't the right version, try again with an alternate approach
          if ! yarn --version | grep -q "4.7.0"; then
            echo "Yarn version mismatch detected, trying alternate approach..."
            npm install -g corepack
            corepack enable
            corepack prepare yarn@4.7.0 --activate
            
            # Create a Yarn wrapper if needed
            if ! which yarn | grep -q "corepack/yarn"; then
              echo "Creating wrapper script for Yarn..."
              mkdir -p ~/.local/bin
              echo '#!/bin/bash' > ~/.local/bin/yarn
              echo 'exec "$(which node)" "$(which corepack)" yarn "$@"' >> ~/.local/bin/yarn
              chmod +x ~/.local/bin/yarn
              export PATH="$HOME/.local/bin:$PATH"
            fi
            
            echo "After fix - Yarn version: $(yarn --version)"
          fi

      - name: Install Babel decorator plugin
        run: yarn add --dev @babel/plugin-proposal-decorators

      - name: ESLint
        run: yarn lint:js --max-warnings 0

      - name: Typecheck
        run: yarn typecheck
