name: Asset Precompilation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'stable-*'

jobs:
  precompile-assets:
    runs-on: ubuntu-24.04

    env:
      RAILS_ENV: production
      NODE_ENV: production
      PRECOMPILING_ASSETS: true
      CI: true
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      OTP_SECRET: ${{ secrets.OTP_SECRET }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      XMPP_DOMAIN: ${{ secrets.XMPP_DOMAIN }}
      XMPP_BOSH_URL: ${{ secrets.XMPP_BOSH_URL }}
      XMPP_WEBSOCKET_URL: ${{ secrets.XMPP_WEBSOCKET_URL }}
      CREWAI_ENABLED: true
      OLLAMA_HOST: ${{ secrets.OLLAMA_HOST || 'http://localhost:11434' }}
      OLLAMA_MODEL: ${{ secrets.OLLAMA_MODEL || 'phi3:mini' }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libidn11-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies for CrewAI
        run: |
          python -m pip install --upgrade pip
          pip install crewai ollama

      # Setup proper Node and Yarn versions first
      - name: Set up Javascript environment
        uses: ./.github/actions/setup-javascript
        with:
          onlyProduction: 'true'

      # Make sure we're still using the right Yarn for our version
      - name: Verify Yarn setup
        run: |
          # Print diagnostic information
          echo "Using Node.js version: $(node -v)"
          echo "Using Yarn from: $(which yarn)"
          echo "Yarn version: $(yarn --version)"

          # Explicitly prepare the required Yarn version from package.json if needed
          if grep -q '"packageManager"' package.json; then
            YARN_VERSION=$(grep -o '"packageManager": "yarn@[^"]*"' package.json | grep -o '[0-9][0-9.]*')
            echo "Project requires Yarn version: $YARN_VERSION"
            corepack prepare yarn@$YARN_VERSION --activate
          fi

      - name: Install Babel decorator plugin
        run: yarn add --dev @babel/plugin-proposal-decorators

      - name: Bundle install dependencies
        run: |
          gem install bundler -v '~> 2.5.5'
          bundle config set deployment true
          bundle config set --local path vendor/bundle 
          bundle install --jobs 4 --frozen --retry 3 --frozen

      - name: Precompile assets
        run: |
          echo "Setting up asset precompilation environment..."
          echo "Encryption keys available: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY != '' && secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY != '' && secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT != '' }}"
          bundle exec rake assets:precompile

      - name: Check asset size
        run: |
          du -h -d 1 public/assets

      - name: Cache precompiled assets
        uses: actions/cache@v3
        with:
          path: public/assets
          key: ${{ runner.os }}-assets-${{ github.sha }}
